name: Test aarch64 specific aspects

on:
  push:

# To enable this to run only on relevant pushes, we could add the
# following:
#    paths:
#    - '.github/workflows/aarch64.yml'
#    - '*/aarch64/*'

jobs:
  linux-x86_64:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and run all tests
        run: |
          sudo apt-get update && sudo apt-get install nasm
          mkdir build
          cd build
          ../configure --enable-gpl --samples=../samples
          make -j$(nproc)
          make -j$(nproc) fate-rsync
          make -j$(nproc) fate
          make -j$(nproc) run-checkasm

  linux-gcc:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and test checkasm
        run: |
          sudo apt-get update && sudo apt-get install qemu-user-static gcc-aarch64-linux-gnu
          mkdir build
          cd build
          ../configure --arch=aarch64 --cross-prefix=aarch64-linux-gnu- --target-os=linux --target-exec="qemu-aarch64-static -L /usr/aarch64-linux-gnu" --enable-gpl
          make -j$(nproc) run-checkasm

  linux-clang:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and test checkasm
        run: |
          sudo apt-get update && sudo apt-get install qemu-user-static gcc-aarch64-linux-gnu clang
          mkdir build
          cd build
          ../configure --arch=aarch64 --cross-prefix=aarch64-linux-gnu- --target-os=linux --target-exec="qemu-aarch64-static -L /usr/aarch64-linux-gnu" --enable-gpl --cc="clang -target aarch64-linux-gnu"
          make -j$(nproc) run-checkasm

  linux-pacbti:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Fedora cross sysroot
        run: |
          # docker run --rm -v $PWD:/host arm64v8/fedora:35 bash -c "yum -y install glibc-devel gcc && tar -cf /host/fedora.tar /usr /etc/ld.so.cache"
          # This takes 14 minutes when run in QEMU, but takes 1 minute when run natively
          # on an actual aarch64 linux machine. Thus skip it and fetch a premade tarball
          # instead.
          curl -LO https://martin.st/temp/fedora35-aarch64-sysroot.tar.xz
          xz -d fedora*.tar.xz
          mkdir -p /opt/fedora-sysroot
          tar -C /opt/fedora-sysroot -xf fedora*.tar
          rm fedora*.tar
          ln -s usr/lib64 /opt/fedora-sysroot/lib64
          ln -s usr/lib /opt/fedora-sysroot/lib
      - uses: actions/checkout@v4
      - name: Build and test checkasm
        run: |
          sudo apt-get update && sudo apt-get install binutils-aarch64-linux-gnu clang
          # Using the QEMU installed by setup-qemu-action above, via binfmt, so no
          # --target-exec is needed, but point to the sysroot with QEMU_LD_PREFIX.
          export QEMU_LD_PREFIX=/opt/fedora-sysroot
          mkdir build
          cd build
          ../configure --arch=aarch64 --cross-prefix=aarch64-linux-gnu- --target-os=linux --cc="clang -target aarch64-linux-gnu" --sysroot=/opt/fedora-sysroot --extra-cflags="-mbranch-protection=standard" --extra-ldflags="-mbranch-protection=standard -Wl,-z,force-bti -L/opt/fedora-sysroot/usr/lib64 -L/opt/fedora-sysroot/usr/lib/gcc/aarch64-redhat-linux/11" --enable-gpl
          make -j$(nproc) run-checkasm

  linux-old-toolchain:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install an old toolchain
        run: |
          curl -LO https://releases.linaro.org/components/toolchain/binaries/4.9-2017.01/aarch64-linux-gnu/gcc-linaro-4.9.4-2017.01-x86_64_aarch64-linux-gnu.tar.xz
          tar -Jxf gcc-linaro-*.tar.xz
          rm gcc-linaro-*.tar.xz
          sudo mv gcc-linaro* /opt/gcc-linaro
          echo /opt/gcc-linaro/bin >> $GITHUB_PATH
      - name: Build and test checkasm
        run: |
          sudo apt-get update && sudo apt-get install qemu-user-static libc6-arm64-cross
          mkdir build
          cd build
          ../configure --arch=aarch64 --cross-prefix=aarch64-linux-gnu- --target-os=linux --target-exec="qemu-aarch64-static -L /usr/aarch64-linux-gnu" --enable-gpl
          make -j$(nproc) run-checkasm

  android-old-ndk:
    if: false
    runs-on: ubuntu-22.04 # libtinfo5 is not available in 24.04
    steps:
      - uses: actions/checkout@v4
      - name: Install an NDK
        run: |
          curl -LO https://dl.google.com/android/repository/android-ndk-r17c-linux-x86_64.zip
          unzip -q android-ndk-*.zip
          rm android-ndk-*.zip
          sudo mv android-ndk-* /opt/android-ndk
          # The sysroot stdatomic.h fails with this GCC version, prefer the
          # one from GCC's own include directory.
          rm /opt/android-ndk/sysroot/usr/include/stdatomic.h
          echo /opt/android-ndk/toolchains/aarch64-linux-android-4.9/prebuilt/*-x86*/bin >> $GITHUB_PATH
          sudo apt-get update && sudo apt-get install libtinfo5
      - name: Build
        run: |
          mkdir build
          cd build
          ../configure --arch=aarch64 --cc=aarch64-linux-android-gcc --cross-prefix=aarch64-linux-android- --target-os=android --enable-gpl --sysroot=/opt/android-ndk/platforms/android-28/arch-arm64 --extra-cflags="-isystem /opt/android-ndk/sysroot/usr/include -isystem /opt/android-ndk/sysroot/usr/include/aarch64-linux-android"
          make -j$(nproc) checkasm

  android-new-ndk:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install an NDK
        run: |
          curl -LO https://dl.google.com/android/repository/android-ndk-r26c-linux.zip
          unzip -q android-ndk-*.zip
          rm android-ndk-*.zip
          sudo mv android-ndk-* /opt/android-ndk
          echo /opt/android-ndk/toolchains/llvm/prebuilt/*-x86*/bin >> $GITHUB_PATH
      - name: Build
        run: |
          mkdir build
          cd build
          ../configure --arch=aarch64 --cc=aarch64-linux-android34-clang --cross-prefix=llvm- --target-os=android --enable-gpl
          make -j$(nproc) checkasm

  macos:
    if: false
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Check host type
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" != "arm64" ]; then
              echo Unexpected host architecture $ARCH
              exit 1
          fi
      - name: Build and run all tests
        run: |
          mkdir build
          cd build
          ../configure --enable-gpl --samples=../samples
          make -j$(sysctl -n hw.ncpu)
          make -j$(sysctl -n hw.ncpu) fate-rsync
          make -j$(sysctl -n hw.ncpu) fate
          make -j$(sysctl -n hw.ncpu) run-checkasm

  msvc-wine:
    runs-on: ubuntu-latest
    container: debian:bookworm
    steps:
      - name: Checkout msvc-wine
        uses: actions/checkout@v4
        with:
          repository: mstorsjo/msvc-wine
          ref: 49ae4b63f350770584469317e3995d100d4dcd39
          path: msvc-wine
      - name: Install wine
        run: |
          apt-get update && apt-get install -y --no-install-recommends build-essential git ca-certificates flex bison
          git clone https://gitlab.winehq.org/wine/wine.git
          cd wine
          git checkout wine-8.0
          cd ..
          mkdir wine-build
          cd wine-build
          ../wine/configure --prefix=/opt/wine --enable-win64 --without-freetype --without-x --disable-tests --disable-msvcp140 --disable-msvcp120 --disable-msvcp120_app --disable-msvcp110 --disable-msvcp100 --disable-msvcp90 --disable-msvcp80 --disable-msvcp71 --disable-msvcp70 --disable-msvcp60 --disable-msvcr120_app --disable-msvcr120 --disable-msvcr110 --disable-msvcr100 --disable-msvcr90 --disable-msvcr80 --disable-msvcr71 --disable-msvcr70 --disable-msvcrt40 --disable-msvcrt20 --disable-msvcrtd --disable-crtdll --disable-d3dx10_33 --disable-d3dx10_34 --disable-d3dx10_35 --disable-d3dx10_36 --disable-d3dx10_37 --disable-d3dx10_38 --disable-d3dx10_39 --disable-d3dx10_40 --disable-d3dx10_41 --disable-d3dx10_42 --disable-d3dx10_43 --disable-d3dx9_24 --disable-d3dx9_25 --disable-d3dx9_26 --disable-d3dx9_27 --disable-d3dx9_28 --disable-d3dx9_29 --disable-d3dx9_30 --disable-d3dx9_31 --disable-d3dx9_32 --disable-d3dx9_33 --disable-d3dx9_34 --disable-d3dx9_35 --disable-d3dx9_36 --disable-d3dx9_37 --disable-d3dx9_38 --disable-d3dx9_39 --disable-d3dx9_40 --disable-d3dx9_41 --disable-d3dx9_42 --disable-d3dx9_43 --disable-d3dcompiler_33 --disable-d3dcompiler_34 --disable-d3dcompiler_35 --disable-d3dcompiler_36 --disable-d3dcompiler_37 --disable-d3dcompiler_38 --disable-d3dcompiler_39 --disable-d3dcompiler_40 --disable-d3dcompiler_41 --disable-d3dcompiler_42 --disable-d3dcompiler_43 --disable-d3dcompiler_46 --disable-d3dcompiler_47 --disable-mshtml --disable-wined3d --disable-quartz --disable-jscript --disable-d2d1 --disable-ieframe --disable-d3drm --disable-vbscript --disable-d3d9 --disable-mf --disable-d3d10 --disable-dsound --disable-dinput --disable-dinput8 --disable-d3d8 --disable-d3d11 --disable-d3d12 --disable-msi --disable-actxprxy --disable-opengl32 --disable-dwrite --disable-ddraw --disable-gdiplus --disable-riched20 --disable-msctfp --disable-wineps.drv --disable-msdaps --disable-mshtml.tlb --disable-webservices --disable-msxml3 --disable-wbemprox --disable-dmime --disable-oleacc --disable-dplayx --disable-inetcomm --disable-msctf --disable-avifil32 --disable-hhctrl.ocx --disable-taskschd --disable-winevulkan --disable-qmgrprxy --disable-winhttp --disable-wmp --disable-evr --disable-dmstyle --disable-dxgi --disable-oledb32 --disable-scrrun --disable-amstream --disable-msado15 --disable-hnetcfg --disable-glu32 --disable-sapi --disable-dmusic --disable-inetcpl.cpl --disable-xmllite --disable-dxdiagn --disable-wuapi --disable-wmvcore --disable-dbgeng --disable-dmloader --disable-mmdevapi --disable-ddrawex --disable-atl80 --disable-wsdapi --disable-mapi32 --disable-dpnet --disable-wbemdisp --disable-mstask --disable-winecfg --disable-taskmgr --disable-wordpad --disable-oleview --disable-winhlp32 --disable-winefile --disable-xaudio2_0 --disable-xaudio2_1 --disable-xaudio2_2 --disable-xaudio2_3 --disable-xaudio2_4 --disable-xaudio2_5 --disable-xaudio2_6 --disable-xaudio2_7 --disable-xaudio2_8 --disable-xaudio2_9 --disable-xactengine2_0 --disable-xactengine2_4 --disable-xactengine2_7 --disable-xactengine2_9 --disable-xactengine3_0 --disable-xactengine3_1 --disable-xactengine3_2 --disable-xactengine3_3 --disable-xactengine3_4 --disable-xactengine3_5 --disable-xactengine3_6 --disable-xactengine3_7
          make -j$(nproc)
          make -j$(nproc) install-lib
          echo /opt/wine/bin >> $GITHUB_PATH
      - name: Install msvc-wine
        env:
          WINEPREFIX: /tmp/wine-x64-prefix
        run: |
          apt-get update && apt-get install -y --no-install-recommends python3 msitools ca-certificates winbind
          wine64 wineboot
          msvc-wine/vsdownload.py --accept-license --dest /opt/msvc
          msvc-wine/install.sh /opt/msvc
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v4
        with:
          repository: ffmpeg/gas-preprocessor
          ref: e29a3c6ebd85c252372eaedaf2973c6f9e9fdc4e
          path: gas-preprocessor
      - uses: actions/checkout@v4
        with:
          path: ffmpeg
      - name: Build
        timeout-minutes: 25
        env:
          WINEPREFIX: /tmp/wine-x64-prefix
        run: |
          apt-get update && apt-get install -y make gcc
          mkdir build
          cd build
          export PATH=$(pwd)/../gas-preprocessor:/opt/msvc/bin/arm64:$PATH
          ../ffmpeg/configure --arch=arm64 --target-os=win32 --toolchain=msvc --enable-cross-compile --enable-gpl --target-exec=wine-arm64
          make -j$(nproc) checkasm

  llvm-mingw:
    if: false
    runs-on: ubuntu-latest
    container: linaro/wine-arm64
    steps:
      - uses: actions/checkout@v4
      - name: Install llvm-mingw
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20231128/llvm-mingw-20231128-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar -Jxf llvm-mingw-*-ucrt-ubuntu-*-x86_64.tar.xz
          rm llvm-mingw-*.tar.xz
          mv llvm-mingw-* /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - name: Build and test checkasm
        run: |
          apt-get update && apt-get install -y make gcc
          mkdir build
          cd build
          ../configure --arch=aarch64 --target-os=mingw32 --cross-prefix=aarch64-w64-mingw32- --enable-gpl --target-exec=wine-arm64
          make -j$(nproc) run-checkasm

  msvc:
    if: false
    runs-on: windows-latest
    steps:
      - name: Set up the environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm64
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v4
        with:
          repository: ffmpeg/gas-preprocessor
          ref: e29a3c6ebd85c252372eaedaf2973c6f9e9fdc4e
          path: gas-preprocessor
      - uses: actions/checkout@v4
        with:
          path: ffmpeg
      - uses: msys2/setup-msys2@v2
        with:
          msystem: msys
          path-type: inherit
          install: >-
            make
      - name: Build
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          export PATH=$(pwd)/../gas-preprocessor:$PATH
          ../ffmpeg/configure --arch=arm64 --target-os=win32 --toolchain=msvc --enable-cross-compile --enable-gpl
          make -j$(nproc) checkasm

  indent:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check indentation
        run: |
          ./tools/check_arm_indent.sh
