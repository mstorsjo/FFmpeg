name: Test aarch64 specific aspects

on:
  push:

# To enable this to run only on relevant pushes, we could add the
# following:
#    paths:
#    - '.github/workflows/aarch64.yml'
#    - '*/aarch64/*'

jobs:
  linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and run all tests
        run: |
          sudo apt-get update && sudo apt-get install nasm
          mkdir build
          cd build
          ../configure --enable-gpl --samples=../samples
          make -j$(nproc)
          make -j$(nproc) fate-rsync
          make -j$(nproc) fate
          make -j$(nproc) run-checkasm

  linux-gcc:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Build and run all tests
        run: |
          mkdir build
          cd build
          ../configure --enable-gpl --samples=../samples
          make -j$(nproc)
          make -j$(nproc) fate-rsync
          make -j$(nproc) fate
          make -j$(nproc) run-checkasm

  linux-clang:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Build and run all tests
        run: |
          sudo apt-get update && sudo apt-get install clang
          mkdir build
          cd build
          ../configure --enable-gpl --cc=clang --samples=../samples
          make -j$(nproc)
          make -j$(nproc) fate-rsync
          make -j$(nproc) fate
          make -j$(nproc) run-checkasm

  linux-pacbti:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Set up Fedora cross sysroot
        run: |
          docker run --rm -v $PWD:/host fedora:35 bash -c "yum -y install glibc-devel gcc && tar -cf /host/fedora.tar /usr /etc/ld.so.cache"
          mkdir -p /opt/fedora-sysroot
          tar -C /opt/fedora-sysroot -xf fedora*.tar
          rm fedora*.tar
          ln -s usr/lib64 /opt/fedora-sysroot/lib64
          ln -s usr/lib /opt/fedora-sysroot/lib
      - uses: actions/checkout@v4
      - name: Build and test checkasm
        run: |
          sudo apt-get update && sudo apt-get install clang qemu-user-static
          mkdir build
          cd build
          ../configure --cc=clang --sysroot=/opt/fedora-sysroot --extra-cflags="-mbranch-protection=standard" --extra-ldflags="-mbranch-protection=standard -Wl,-z,force-bti -L/opt/fedora-sysroot/usr/lib64 -L/opt/fedora-sysroot/usr/lib/gcc/aarch64-redhat-linux/11" --enable-gpl --target-exec="qemu-aarch64-static -L /opt/fedora-sysroot"
          make -j$(nproc) run-checkasm

  linux-old-toolchain:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install an old toolchain
        run: |
          curl -LO https://releases.linaro.org/components/toolchain/binaries/4.9-2017.01/aarch64-linux-gnu/gcc-linaro-4.9.4-2017.01-x86_64_aarch64-linux-gnu.tar.xz
          tar -Jxf gcc-linaro-*.tar.xz
          rm gcc-linaro-*.tar.xz
          sudo mv gcc-linaro* /opt/gcc-linaro
          echo /opt/gcc-linaro/bin >> $GITHUB_PATH
      - name: Build and test checkasm
        run: |
          sudo apt-get update && sudo apt-get install qemu-user-static libc6-arm64-cross
          mkdir build
          cd build
          ../configure --arch=aarch64 --cross-prefix=aarch64-linux-gnu- --target-os=linux --target-exec="qemu-aarch64-static -L /usr/aarch64-linux-gnu" --enable-gpl
          make -j$(nproc) run-checkasm

  android-old-ndk:
    runs-on: ubuntu-22.04 # libtinfo5 is not available in 24.04
    steps:
      - uses: actions/checkout@v4
      - name: Install an NDK
        run: |
          curl -LO https://dl.google.com/android/repository/android-ndk-r17c-linux-x86_64.zip
          unzip -q android-ndk-*.zip
          rm android-ndk-*.zip
          sudo mv android-ndk-* /opt/android-ndk
          # The sysroot stdatomic.h fails with this GCC version, prefer the
          # one from GCC's own include directory.
          rm /opt/android-ndk/sysroot/usr/include/stdatomic.h
          echo /opt/android-ndk/toolchains/aarch64-linux-android-4.9/prebuilt/*-x86*/bin >> $GITHUB_PATH
          sudo apt-get update && sudo apt-get install libtinfo5
      - name: Build
        run: |
          mkdir build
          cd build
          ../configure --arch=aarch64 --cc=aarch64-linux-android-gcc --cross-prefix=aarch64-linux-android- --target-os=android --enable-gpl --sysroot=/opt/android-ndk/platforms/android-28/arch-arm64 --extra-cflags="-isystem /opt/android-ndk/sysroot/usr/include -isystem /opt/android-ndk/sysroot/usr/include/aarch64-linux-android"
          make -j$(nproc) checkasm

  android-new-ndk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install an NDK
        run: |
          curl -LO https://dl.google.com/android/repository/android-ndk-r26c-linux.zip
          unzip -q android-ndk-*.zip
          rm android-ndk-*.zip
          sudo mv android-ndk-* /opt/android-ndk
          echo /opt/android-ndk/toolchains/llvm/prebuilt/*-x86*/bin >> $GITHUB_PATH
      - name: Build
        run: |
          mkdir build
          cd build
          ../configure --arch=aarch64 --cc=aarch64-linux-android34-clang --cross-prefix=llvm- --target-os=android --enable-gpl
          make -j$(nproc) checkasm

  macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Check host type
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" != "arm64" ]; then
              echo Unexpected host architecture $ARCH
              exit 1
          fi
      - name: Build and run all tests
        run: |
          mkdir build
          cd build
          ../configure --enable-gpl --samples=../samples
          make -j$(sysctl -n hw.ncpu)
          make -j$(sysctl -n hw.ncpu) fate-rsync
          make -j$(sysctl -n hw.ncpu) fate
          make -j$(sysctl -n hw.ncpu) run-checkasm

  msvc-wine:
    runs-on: ubuntu-24.04-arm
    container: ghcr.io/mstorsjo/wine
    steps:
      - name: Checkout msvc-wine
        uses: actions/checkout@v4
        with:
          repository: mstorsjo/msvc-wine
          ref: 49ae4b63f350770584469317e3995d100d4dcd39
          path: msvc-wine
      - name: Install msvc-wine
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends wine python3 msitools ca-certificates winbind
          wine wineboot
          msvc-wine/vsdownload.py --accept-license --dest /opt/msvc
          msvc-wine/install.sh /opt/msvc
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v4
        with:
          repository: ffmpeg/gas-preprocessor
          ref: e29a3c6ebd85c252372eaedaf2973c6f9e9fdc4e
          path: gas-preprocessor
      - uses: actions/checkout@v4
        with:
          path: ffmpeg
      - name: Build and run all tests
        run: |
          mkdir build
          cd build
          export PATH=$(pwd)/../gas-preprocessor:/opt/msvc/bin/arm64:$PATH
          ../ffmpeg/configure --arch=arm64 --target-os=win32 --toolchain=msvc --enable-cross-compile --enable-gpl --target-exec=wine --samples=../samples
          make -j$(nproc)
          make -j$(nproc) fate-rsync
          make -j$(nproc) fate
          make -j$(nproc) run-checkasm

  llvm-mingw:
    runs-on: ubuntu-24.04-arm
    container: ghcr.io/mstorsjo/wine
    steps:
      - uses: actions/checkout@v4
      - name: Install llvm-mingw
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20231128/llvm-mingw-20231128-ucrt-ubuntu-20.04-aarch64.tar.xz
          tar -Jxf llvm-mingw-*-ucrt-ubuntu-*-aarch64.tar.xz
          rm llvm-mingw-*.tar.xz
          mv llvm-mingw-* /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - name: Build and run all tests
        run: |
          mkdir build
          cd build
          ../configure --arch=aarch64 --target-os=mingw32 --cross-prefix=aarch64-w64-mingw32- --enable-gpl --target-exec=wine --samples=../samples
          make -j$(nproc)
          make -j$(nproc) fate-rsync
          make -j$(nproc) fate
          make -j$(nproc) run-checkasm

  llvm-mingw-native:
    runs-on: windows-11-arm
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: >-
            unzip
            make
      - name: Install llvm-mingw
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20231128/llvm-mingw-20231128-ucrt-aarch64.zip
          unzip -q llvm-mingw-*.zip
          rm llvm-mingw-*.zip
          mv llvm-mingw-* /llvm-mingw
          echo /llvm-mingw/bin >> $GITHUB_PATH
      - name: Build and test checkasm
        shell: msys2 {0}
        run: |
          export PATH=/llvm-mingw/bin:$PATH
          mkdir build
          cd build
          ../configure --arch=aarch64 --enable-gpl
          make -j$(nproc) checkasm
          make -j$(nproc) run-checkasm

  msvc:
    runs-on: windows-11-arm
    steps:
      - name: Avoid git checking out files with CRLF
        run: |
          git config --global core.autocrlf false
      - name: Set up the environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: arm64
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v4
        with:
          repository: ffmpeg/gas-preprocessor
          ref: e29a3c6ebd85c252372eaedaf2973c6f9e9fdc4e
          path: gas-preprocessor
      - uses: actions/checkout@v4
        with:
          path: ffmpeg
      - uses: msys2/setup-msys2@v2
        with:
          msystem: msys
          path-type: inherit
          install: >-
            make
            rsync
            diffutils
      - name: Build and run all tests
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          export PATH=$(pwd)/../gas-preprocessor:$PATH
          ../ffmpeg/configure --arch=arm64 --target-os=win32 --toolchain=msvc --enable-cross-compile --enable-gpl --samples=../samples
          make -j$(nproc) checkasm
          make -j$(nproc) run-checkasm
          make -j$(nproc) fate-rsync
          make -j$(nproc) fate
          make -j$(nproc) run-checkasm

  indent:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check indentation
        run: |
          ./tools/check_arm_indent.sh
